/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { StringifiedJson } from "./stories/components/color-swatch-group/color-swatch-group";
import { OptionItem } from "./components/zen-dropdown/zen-dropdown";
import { ZenDismissDuration, ZenVariant } from "./components/zen-notification/zen-notification-helper";
import { StepEvent, StepItem } from "./components/zen-steps/zen-steps";
export namespace Components {
    interface ColorSwatch {
        /**
          * Hex color value
         */
        "color": string;
        /**
          * True if color is considered bright
         */
        "isBrightColor": boolean;
        /**
          * Scss variable name
         */
        "varName": string;
    }
    interface ColorSwatchGroup {
        /**
          * Array of colors
         */
        "colors": StringifiedJson;
    }
    interface TextWithDetails {
    }
    interface ZenAnimate {
        /**
          * Prop that will show the slot
         */
        "show": boolean;
    }
    interface ZenButton {
        /**
          * If present, button will be disabled
         */
        "disabled"?: boolean;
        /**
          * Label of the button
         */
        "label": "Button";
        /**
          * If present, will show a spinner
         */
        "loading"?: boolean;
        /**
          * Color variant of the button
         */
        "variant": "primary";
    }
    interface ZenDropdown {
        /**
          * If true, multiple options can be selected
         */
        "multiselect": boolean;
        /**
          * Array of available options
         */
        "options": Array<OptionItem>;
        /**
          * Option key that is unique for each option
         */
        "trackBy": string;
        /**
          * Selected option
         */
        "val": OptionItem;
    }
    interface ZenFormGroup {
    }
    interface ZenInput {
        /**
          * Disables input.
         */
        "disabled": false;
        /**
          * Placeholder of the input.
         */
        "placeholder": string;
        /**
          * Makes input required.
         */
        "required": false;
        /**
          * The value of the input.
         */
        "value"?: string | number | null;
    }
    interface ZenInputSupportText {
        /**
          * Supporting text
         */
        "text": string;
    }
    interface ZenLabel {
        /**
          * Text of the label
         */
        "label": string;
        /**
          * Shows a red asterisk after label
         */
        "required": false;
    }
    interface ZenNotification {
        /**
          * Can dismiss
         */
        "dismiss": boolean;
        /**
          * Hide duration
         */
        "dismissDuration": ZenDismissDuration;
        /**
          * Height
         */
        "height": string;
        /**
          * Message
         */
        "nMessage": string;
        /**
          * Title
         */
        "nTitle": string;
        /**
          * Variant
         */
        "variant": ZenVariant;
        /**
          * Width
         */
        "width": string;
    }
    interface ZenSpinner {
        /**
          * Color of the spinner. Accepts any CSS Legal Color Value.
         */
        "color": string;
    }
    interface ZenSteps {
        /**
          * Index of currently active step
         */
        "activeIndex": 0;
        /**
          * User can click step to go to step
         */
        "selectable": true;
        /**
          * Ordered array of possible steps
         */
        "steps": Array<StepItem>;
    }
}
declare global {
    interface HTMLColorSwatchElement extends Components.ColorSwatch, HTMLStencilElement {
    }
    var HTMLColorSwatchElement: {
        prototype: HTMLColorSwatchElement;
        new (): HTMLColorSwatchElement;
    };
    interface HTMLColorSwatchGroupElement extends Components.ColorSwatchGroup, HTMLStencilElement {
    }
    var HTMLColorSwatchGroupElement: {
        prototype: HTMLColorSwatchGroupElement;
        new (): HTMLColorSwatchGroupElement;
    };
    interface HTMLTextWithDetailsElement extends Components.TextWithDetails, HTMLStencilElement {
    }
    var HTMLTextWithDetailsElement: {
        prototype: HTMLTextWithDetailsElement;
        new (): HTMLTextWithDetailsElement;
    };
    interface HTMLZenAnimateElement extends Components.ZenAnimate, HTMLStencilElement {
    }
    var HTMLZenAnimateElement: {
        prototype: HTMLZenAnimateElement;
        new (): HTMLZenAnimateElement;
    };
    interface HTMLZenButtonElement extends Components.ZenButton, HTMLStencilElement {
    }
    var HTMLZenButtonElement: {
        prototype: HTMLZenButtonElement;
        new (): HTMLZenButtonElement;
    };
    interface HTMLZenDropdownElement extends Components.ZenDropdown, HTMLStencilElement {
    }
    var HTMLZenDropdownElement: {
        prototype: HTMLZenDropdownElement;
        new (): HTMLZenDropdownElement;
    };
    interface HTMLZenFormGroupElement extends Components.ZenFormGroup, HTMLStencilElement {
    }
    var HTMLZenFormGroupElement: {
        prototype: HTMLZenFormGroupElement;
        new (): HTMLZenFormGroupElement;
    };
    interface HTMLZenInputElement extends Components.ZenInput, HTMLStencilElement {
    }
    var HTMLZenInputElement: {
        prototype: HTMLZenInputElement;
        new (): HTMLZenInputElement;
    };
    interface HTMLZenInputSupportTextElement extends Components.ZenInputSupportText, HTMLStencilElement {
    }
    var HTMLZenInputSupportTextElement: {
        prototype: HTMLZenInputSupportTextElement;
        new (): HTMLZenInputSupportTextElement;
    };
    interface HTMLZenLabelElement extends Components.ZenLabel, HTMLStencilElement {
    }
    var HTMLZenLabelElement: {
        prototype: HTMLZenLabelElement;
        new (): HTMLZenLabelElement;
    };
    interface HTMLZenNotificationElement extends Components.ZenNotification, HTMLStencilElement {
    }
    var HTMLZenNotificationElement: {
        prototype: HTMLZenNotificationElement;
        new (): HTMLZenNotificationElement;
    };
    interface HTMLZenSpinnerElement extends Components.ZenSpinner, HTMLStencilElement {
    }
    var HTMLZenSpinnerElement: {
        prototype: HTMLZenSpinnerElement;
        new (): HTMLZenSpinnerElement;
    };
    interface HTMLZenStepsElement extends Components.ZenSteps, HTMLStencilElement {
    }
    var HTMLZenStepsElement: {
        prototype: HTMLZenStepsElement;
        new (): HTMLZenStepsElement;
    };
    interface HTMLElementTagNameMap {
        "color-swatch": HTMLColorSwatchElement;
        "color-swatch-group": HTMLColorSwatchGroupElement;
        "text-with-details": HTMLTextWithDetailsElement;
        "zen-animate": HTMLZenAnimateElement;
        "zen-button": HTMLZenButtonElement;
        "zen-dropdown": HTMLZenDropdownElement;
        "zen-form-group": HTMLZenFormGroupElement;
        "zen-input": HTMLZenInputElement;
        "zen-input-support-text": HTMLZenInputSupportTextElement;
        "zen-label": HTMLZenLabelElement;
        "zen-notification": HTMLZenNotificationElement;
        "zen-spinner": HTMLZenSpinnerElement;
        "zen-steps": HTMLZenStepsElement;
    }
}
declare namespace LocalJSX {
    interface ColorSwatch {
        /**
          * Hex color value
         */
        "color"?: string;
        /**
          * True if color is considered bright
         */
        "isBrightColor"?: boolean;
        /**
          * Scss variable name
         */
        "varName"?: string;
    }
    interface ColorSwatchGroup {
        /**
          * Array of colors
         */
        "colors"?: StringifiedJson;
    }
    interface TextWithDetails {
    }
    interface ZenAnimate {
        /**
          * Prop that will show the slot
         */
        "show"?: boolean;
    }
    interface ZenButton {
        /**
          * If present, button will be disabled
         */
        "disabled"?: boolean;
        /**
          * Label of the button
         */
        "label"?: "Button";
        /**
          * If present, will show a spinner
         */
        "loading"?: boolean;
        /**
          * Color variant of the button
         */
        "variant"?: "primary";
    }
    interface ZenDropdown {
        /**
          * If true, multiple options can be selected
         */
        "multiselect"?: boolean;
        /**
          * Emitted on any selection change
         */
        "onInput2"?: (event: CustomEvent<OptionItem>) => void;
        /**
          * Array of available options
         */
        "options"?: Array<OptionItem>;
        /**
          * Option key that is unique for each option
         */
        "trackBy"?: string;
        /**
          * Selected option
         */
        "val"?: OptionItem;
    }
    interface ZenFormGroup {
    }
    interface ZenInput {
        /**
          * Disables input.
         */
        "disabled"?: false;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onZenInput"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * Placeholder of the input.
         */
        "placeholder"?: string;
        /**
          * Makes input required.
         */
        "required"?: false;
        /**
          * The value of the input.
         */
        "value"?: string | number | null;
    }
    interface ZenInputSupportText {
        /**
          * Supporting text
         */
        "text"?: string;
    }
    interface ZenLabel {
        /**
          * Text of the label
         */
        "label"?: string;
        /**
          * Shows a red asterisk after label
         */
        "required"?: false;
    }
    interface ZenNotification {
        /**
          * Can dismiss
         */
        "dismiss"?: boolean;
        /**
          * Hide duration
         */
        "dismissDuration"?: ZenDismissDuration;
        /**
          * Height
         */
        "height"?: string;
        /**
          * Message
         */
        "nMessage"?: string;
        /**
          * Title
         */
        "nTitle"?: string;
        /**
          * Variant
         */
        "variant"?: ZenVariant;
        /**
          * Width
         */
        "width"?: string;
    }
    interface ZenSpinner {
        /**
          * Color of the spinner. Accepts any CSS Legal Color Value.
         */
        "color"?: string;
    }
    interface ZenSteps {
        /**
          * Index of currently active step
         */
        "activeIndex"?: 0;
        /**
          * User clicked a step
         */
        "onSelected"?: (event: CustomEvent<StepEvent>) => void;
        /**
          * User can click step to go to step
         */
        "selectable"?: true;
        /**
          * Ordered array of possible steps
         */
        "steps"?: Array<StepItem>;
    }
    interface IntrinsicElements {
        "color-swatch": ColorSwatch;
        "color-swatch-group": ColorSwatchGroup;
        "text-with-details": TextWithDetails;
        "zen-animate": ZenAnimate;
        "zen-button": ZenButton;
        "zen-dropdown": ZenDropdown;
        "zen-form-group": ZenFormGroup;
        "zen-input": ZenInput;
        "zen-input-support-text": ZenInputSupportText;
        "zen-label": ZenLabel;
        "zen-notification": ZenNotification;
        "zen-spinner": ZenSpinner;
        "zen-steps": ZenSteps;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "color-swatch": LocalJSX.ColorSwatch & JSXBase.HTMLAttributes<HTMLColorSwatchElement>;
            "color-swatch-group": LocalJSX.ColorSwatchGroup & JSXBase.HTMLAttributes<HTMLColorSwatchGroupElement>;
            "text-with-details": LocalJSX.TextWithDetails & JSXBase.HTMLAttributes<HTMLTextWithDetailsElement>;
            "zen-animate": LocalJSX.ZenAnimate & JSXBase.HTMLAttributes<HTMLZenAnimateElement>;
            "zen-button": LocalJSX.ZenButton & JSXBase.HTMLAttributes<HTMLZenButtonElement>;
            "zen-dropdown": LocalJSX.ZenDropdown & JSXBase.HTMLAttributes<HTMLZenDropdownElement>;
            "zen-form-group": LocalJSX.ZenFormGroup & JSXBase.HTMLAttributes<HTMLZenFormGroupElement>;
            "zen-input": LocalJSX.ZenInput & JSXBase.HTMLAttributes<HTMLZenInputElement>;
            "zen-input-support-text": LocalJSX.ZenInputSupportText & JSXBase.HTMLAttributes<HTMLZenInputSupportTextElement>;
            "zen-label": LocalJSX.ZenLabel & JSXBase.HTMLAttributes<HTMLZenLabelElement>;
            "zen-notification": LocalJSX.ZenNotification & JSXBase.HTMLAttributes<HTMLZenNotificationElement>;
            "zen-spinner": LocalJSX.ZenSpinner & JSXBase.HTMLAttributes<HTMLZenSpinnerElement>;
            "zen-steps": LocalJSX.ZenSteps & JSXBase.HTMLAttributes<HTMLZenStepsElement>;
        }
    }
}
